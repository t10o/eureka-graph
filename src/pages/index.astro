---
import Layout from '../layouts/Layout.astro';
---

<Layout title="マイスロ通算グラフ">
	<div class="dashboard">
		<div class="container">
			<div class="hero">
				<h2 class="hero-title">📊 通算データ分析</h2>
				<p class="hero-description">2023年12月から現在までの実戦データを可視化</p>
			</div>
			
			<div id="loading" class="loading-state">
				<div class="loading-spinner"></div>
				<p class="loading-text">データを読み込み中...</p>
			</div>
			
			<div id="graph-container" class="graph-container" style="display: none;">
				<div class="graph-header">
					<h3 class="graph-title">📈 累積収支グラフ</h3>
					<div class="graph-legend">
						<div class="legend-item">
							<div class="legend-color real"></div>
							<span>実データ</span>
						</div>
						<div class="legend-item">
							<div class="legend-color extrapolated"></div>
							<span>外挿データ（8/31）</span>
						</div>
					</div>
				</div>
				<div class="graph-wrapper">
					<canvas id="cumulative_graph" width="800" height="400"></canvas>
				</div>
				
				<div id="stats" class="stats-container">
					<h3 class="stats-title">📋 統計情報</h3>
					<div id="stats-content" class="stats-grid"></div>
				</div>
			</div>
			
			<div id="error" class="error-state" style="display: none;">
				<div class="error-icon">⚠️</div>
				<h3 class="error-title">データの読み込みに失敗しました</h3>
				<p class="error-description">しばらく時間をおいてから再度お試しください</p>
			</div>
		</div>
	</div>
</Layout>

<style>
	.dashboard {
		min-height: calc(100vh - 200px);
	}

	.hero {
		text-align: center;
		margin-bottom: 3rem;
		padding: 2rem 0;
	}

	.hero-title {
		font-size: 2.5rem;
		font-weight: 700;
		color: #1f2937;
		margin: 0 0 1rem 0;
	}

	.hero-description {
		font-size: 1.2rem;
		color: #6b7280;
		margin: 0;
	}

	.loading-state {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		padding: 4rem 2rem;
		background: #ffffff;
		border: 1px solid #e5e7eb;
		border-radius: 8px;
		box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
	}

	.loading-spinner {
		width: 40px;
		height: 40px;
		border: 4px solid #e5e7eb;
		border-top: 4px solid #3b82f6;
		border-radius: 50%;
		animation: spin 1s linear infinite;
		margin-bottom: 1rem;
	}

	@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	.loading-text {
		font-size: 1.1rem;
		color: #6b7280;
		margin: 0;
	}

	.graph-container {
		background: #ffffff;
		border: 1px solid #e5e7eb;
		border-radius: 8px;
		box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
		overflow: hidden;
	}

	.graph-header {
		padding: 1.5rem;
		border-bottom: 1px solid #e5e7eb;
		display: flex;
		justify-content: space-between;
		align-items: center;
		flex-wrap: wrap;
		gap: 1rem;
	}

	.graph-title {
		font-size: 1.25rem;
		font-weight: 600;
		color: #1f2937;
		margin: 0;
	}

	.graph-legend {
		display: flex;
		gap: 1.5rem;
		flex-wrap: wrap;
	}

	.legend-item {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		font-size: 0.875rem;
		color: #6b7280;
	}

	.legend-color {
		width: 12px;
		height: 12px;
		border-radius: 2px;
	}

	.legend-color.real {
		background: #ef4444;
	}

	.legend-color.extrapolated {
		background: repeating-linear-gradient(
			45deg,
			#ef4444,
			#ef4444 4px,
			transparent 4px,
			transparent 8px
		);
	}

	.graph-wrapper {
		padding: 1.5rem;
		background: white;
	}

	.graph-wrapper canvas {
		width: 100%;
		height: auto;
		border-radius: 4px;
	}

	.stats-container {
		padding: 1.5rem;
		background: #f9fafb;
		border-top: 1px solid #e5e7eb;
	}

	.stats-title {
		font-size: 1.125rem;
		font-weight: 600;
		color: #1f2937;
		margin: 0 0 1rem 0;
	}

	.stats-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 1rem;
	}

	.stat-item {
		background: white;
		padding: 1rem;
		border-radius: 6px;
		border: 1px solid #e5e7eb;
	}

	.stat-label {
		font-weight: 500;
		color: #6b7280;
		font-size: 0.875rem;
		margin-bottom: 0.25rem;
		display: block;
	}

	.stat-value {
		font-size: 1.25rem;
		font-weight: 600;
		color: #1f2937;
		margin: 0;
	}

	.error-state {
		text-align: center;
		padding: 3rem 2rem;
		background: #ffffff;
		border: 1px solid #e5e7eb;
		border-radius: 8px;
		box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
	}

	.error-icon {
		font-size: 2rem;
		margin-bottom: 1rem;
	}

	.error-title {
		font-size: 1.25rem;
		font-weight: 600;
		color: #ef4444;
		margin: 0 0 0.5rem 0;
	}

	.error-description {
		color: #6b7280;
		margin: 0;
	}

	@media (max-width: 768px) {
		.hero-title {
			font-size: 2rem;
		}
		
		.hero-description {
			font-size: 1rem;
		}
		
		.graph-header {
			flex-direction: column;
			align-items: flex-start;
			padding: 1.5rem;
		}
		
		.graph-wrapper {
			padding: 1rem;
		}
		
		.stats-container {
			padding: 1.5rem;
		}
		
		.stats-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

<script>
    // Chart.jsのスクリプトを読み込み
    const chartScript = document.createElement('script');
    chartScript.src = 'https://cdn.jsdelivr.net/npm/chart.js';
    document.head.appendChild(chartScript);
    
    chartScript.onload = async () => {
        try {
            const response = await fetch('/api/cumulative-graph');
            const result = await response.json();
            
            if (result.success) {
                // グラフを表示
                const graphContainer = document.getElementById('graph-container');
                const loading = document.getElementById('loading');
                
                if (loading) loading.style.display = 'none';
                if (graphContainer) graphContainer.style.display = 'block';
                
                // Chart.jsでグラフを描画
                const canvas = document.getElementById('cumulative_graph') as HTMLCanvasElement;
                if (!canvas) return;
                const ctx = canvas.getContext('2d');
                if (!ctx) return;
                
                if (result.data && result.data.datasets) {
                    const chartData = result.data;
                    const maxX = chartData.maxX;
                    
                    new (window as any).Chart(ctx, {
                        type: "line",
                        data: {
                            datasets: chartData.datasets
                        },
                        options: {
                            parsing: false,
                            spanGaps: false,              // null で線を切る場合は false のまま
                            plugins: { legend: { display: true } },
                            scales: {
                                x: {
                                    type: "linear",
                                    min: 0,
                                    max: maxX,
                                    ticks: { stepSize: 2000, callback: (v: any) => `${v}G` },
                                    title: { display: true, text: "ゲーム数 (G)" },
                                },
                                y: {
                                    title: { display: true, text: "累積差枚 (枚)" },
                                }
                            }
                        }
                    });
                }
                
                // 統計情報を表示
                const statsContent = document.getElementById('stats-content');
                if (!statsContent) return;
                
                if (result.points && result.points.length > 0) {
                    const points = result.points;
                    const lastPoint = points[points.length - 1];
                    const totalGames = lastPoint.cumGame;
                    const totalBalance = lastPoint.cumDiff;
                    const base = points[0]?.cumDiff ?? 0;
                    const normalizedBalance = totalBalance - base;
                    
                    statsContent.innerHTML = `
                        <div class="stat-item">
                            <span class="stat-label">総ゲーム数:</span>
                            <span class="stat-value">${totalGames.toLocaleString()}G</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">総収支（正規化前）:</span>
                            <span class="stat-value">${totalBalance.toLocaleString()}枚</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">総収支（正規化後）:</span>
                            <span class="stat-value">${normalizedBalance.toLocaleString()}枚</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">データポイント数:</span>
                            <span class="stat-value">${points.length}個</span>
                        </div>
                    `;
                    
                    // 8/31の特別処理情報を表示
                    const aug31Summary = result.summaries?.find((s: any) => s.day === '2024-08-31');
                    if (aug31Summary && aug31Summary.specialRuleApplied) {
                        statsContent.innerHTML += `
                            <div class="stat-item">
                                <span class="stat-label">8/31外挿ポイント:</span>
                                <span class="stat-value">${aug31Summary.extrapolatedPointsCount}個</span>
                            </div>
                        `;
                    }
                }
            } else {
                throw new Error(result.error || 'Unknown error');
            }
        } catch (error) {
            console.error('Error loading data:', error);
            const loading = document.getElementById('loading');
            const errorDiv = document.getElementById('error');
            if (loading) loading.style.display = 'none';
            if (errorDiv) errorDiv.style.display = 'block';
        }
    };
    
    chartScript.onerror = () => {
        console.error('Failed to load Chart.js script');
        const loading = document.getElementById('loading');
        const errorDiv = document.getElementById('error');
        if (loading) loading.style.display = 'none';
        if (errorDiv) errorDiv.style.display = 'block';
    };
</script>